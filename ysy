## makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse

## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
    ivs <- NULL
    set <- function(y) {
        x <<- y           # use `<<-` to assign a value to an object in an environment different from the current environment. 
        ivs <<- NULL
    }
    get <- function() x
    setinverse <- function(inverse) ivs <<- inverse
    getinverse <- function() ivs
    list(set = set, get = get,
         setinverse = setinverse,
         getinverse = getinverse)
}



cacheSolve <- function(x, ...) {
## return: inverse of the original matrix input to makeCacheMatrix()
    ivs <- x$getinverse()
    if (!is.null(ivs)){
        # get it from the cache and skips the computation. 
        message("getting cached data")
        return(ivs)
    }
   
   
   # calculates the inverse 
    data = x$get()
    ivs <- solve(data, ...)
    
     # sets the value of the inverse
    x$setinverse(ivs)
    
    return(ivs)
}
